// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "BackendCRM/entities"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// ActorFindBy provides a mock function with given fields: column, value
func (_m *Repository) ActorFindBy(column string, value string) (*entities.Actors, error) {
	ret := _m.Called(column, value)

	var r0 *entities.Actors
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*entities.Actors, error)); ok {
		return rf(column, value)
	}
	if rf, ok := ret.Get(0).(func(string, string) *entities.Actors); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Actors)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(column, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ActorFindBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActorFindBy'
type Repository_ActorFindBy_Call struct {
	*mock.Call
}

// ActorFindBy is a helper method to define mock.On call
//   - column string
//   - value string
func (_e *Repository_Expecter) ActorFindBy(column interface{}, value interface{}) *Repository_ActorFindBy_Call {
	return &Repository_ActorFindBy_Call{Call: _e.mock.On("ActorFindBy", column, value)}
}

func (_c *Repository_ActorFindBy_Call) Run(run func(column string, value string)) *Repository_ActorFindBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Repository_ActorFindBy_Call) Return(_a0 *entities.Actors, _a1 error) *Repository_ActorFindBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ActorFindBy_Call) RunAndReturn(run func(string, string) (*entities.Actors, error)) *Repository_ActorFindBy_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeActorById provides a mock function with given fields: cst, id
func (_m *Repository) ChangeActorById(cst *entities.Actors, id string) (*entities.Actors, error) {
	ret := _m.Called(cst, id)

	var r0 *entities.Actors
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Actors, string) (*entities.Actors, error)); ok {
		return rf(cst, id)
	}
	if rf, ok := ret.Get(0).(func(*entities.Actors, string) *entities.Actors); ok {
		r0 = rf(cst, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Actors)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Actors, string) error); ok {
		r1 = rf(cst, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ChangeActorById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeActorById'
type Repository_ChangeActorById_Call struct {
	*mock.Call
}

// ChangeActorById is a helper method to define mock.On call
//   - cst *entities.Actors
//   - id string
func (_e *Repository_Expecter) ChangeActorById(cst interface{}, id interface{}) *Repository_ChangeActorById_Call {
	return &Repository_ChangeActorById_Call{Call: _e.mock.On("ChangeActorById", cst, id)}
}

func (_c *Repository_ChangeActorById_Call) Run(run func(cst *entities.Actors, id string)) *Repository_ChangeActorById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Actors), args[1].(string))
	})
	return _c
}

func (_c *Repository_ChangeActorById_Call) Return(_a0 *entities.Actors, _a1 error) *Repository_ChangeActorById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ChangeActorById_Call) RunAndReturn(run func(*entities.Actors, string) (*entities.Actors, error)) *Repository_ChangeActorById_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeRegisById provides a mock function with given fields: cst, id
func (_m *Repository) ChangeRegisById(cst *entities.Registers, id string) (*entities.Registers, error) {
	ret := _m.Called(cst, id)

	var r0 *entities.Registers
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Registers, string) (*entities.Registers, error)); ok {
		return rf(cst, id)
	}
	if rf, ok := ret.Get(0).(func(*entities.Registers, string) *entities.Registers); ok {
		r0 = rf(cst, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Registers)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Registers, string) error); ok {
		r1 = rf(cst, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ChangeRegisById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeRegisById'
type Repository_ChangeRegisById_Call struct {
	*mock.Call
}

// ChangeRegisById is a helper method to define mock.On call
//   - cst *entities.Registers
//   - id string
func (_e *Repository_Expecter) ChangeRegisById(cst interface{}, id interface{}) *Repository_ChangeRegisById_Call {
	return &Repository_ChangeRegisById_Call{Call: _e.mock.On("ChangeRegisById", cst, id)}
}

func (_c *Repository_ChangeRegisById_Call) Run(run func(cst *entities.Registers, id string)) *Repository_ChangeRegisById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Registers), args[1].(string))
	})
	return _c
}

func (_c *Repository_ChangeRegisById_Call) Return(_a0 *entities.Registers, _a1 error) *Repository_ChangeRegisById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ChangeRegisById_Call) RunAndReturn(run func(*entities.Registers, string) (*entities.Registers, error)) *Repository_ChangeRegisById_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]entities.Actors, error) {
	ret := _m.Called()

	var r0 []entities.Actors
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Actors, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Actors); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Actors)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type Repository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *Repository_Expecter) FindAll() *Repository_FindAll_Call {
	return &Repository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *Repository_FindAll_Call) Run(run func()) *Repository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_FindAll_Call) Return(_a0 []entities.Actors, _a1 error) *Repository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindAll_Call) RunAndReturn(run func() ([]entities.Actors, error)) *Repository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllRegis provides a mock function with given fields:
func (_m *Repository) FindAllRegis() ([]entities.Registers, error) {
	ret := _m.Called()

	var r0 []entities.Registers
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Registers, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Registers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Registers)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindAllRegis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllRegis'
type Repository_FindAllRegis_Call struct {
	*mock.Call
}

// FindAllRegis is a helper method to define mock.On call
func (_e *Repository_Expecter) FindAllRegis() *Repository_FindAllRegis_Call {
	return &Repository_FindAllRegis_Call{Call: _e.mock.On("FindAllRegis")}
}

func (_c *Repository_FindAllRegis_Call) Run(run func()) *Repository_FindAllRegis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_FindAllRegis_Call) Return(_a0 []entities.Registers, _a1 error) *Repository_FindAllRegis_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindAllRegis_Call) RunAndReturn(run func() ([]entities.Registers, error)) *Repository_FindAllRegis_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: user
func (_m *Repository) Save(user *entities.Actors) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Actors) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - user *entities.Actors
func (_e *Repository_Expecter) Save(user interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save", user)}
}

func (_c *Repository_Save_Call) Run(run func(user *entities.Actors)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Actors))
	})
	return _c
}

func (_c *Repository_Save_Call) Return(_a0 error) *Repository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Save_Call) RunAndReturn(run func(*entities.Actors) error) *Repository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveReg provides a mock function with given fields: user
func (_m *Repository) SaveReg(user *entities.Registers) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Registers) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_SaveReg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveReg'
type Repository_SaveReg_Call struct {
	*mock.Call
}

// SaveReg is a helper method to define mock.On call
//   - user *entities.Registers
func (_e *Repository_Expecter) SaveReg(user interface{}) *Repository_SaveReg_Call {
	return &Repository_SaveReg_Call{Call: _e.mock.On("SaveReg", user)}
}

func (_c *Repository_SaveReg_Call) Run(run func(user *entities.Registers)) *Repository_SaveReg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Registers))
	})
	return _c
}

func (_c *Repository_SaveReg_Call) Return(_a0 error) *Repository_SaveReg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_SaveReg_Call) RunAndReturn(run func(*entities.Registers) error) *Repository_SaveReg_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDel provides a mock function with given fields: id
func (_m *Repository) SoftDel(id string) (*entities.Actors, error) {
	ret := _m.Called(id)

	var r0 *entities.Actors
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Actors, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Actors); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Actors)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_SoftDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDel'
type Repository_SoftDel_Call struct {
	*mock.Call
}

// SoftDel is a helper method to define mock.On call
//   - id string
func (_e *Repository_Expecter) SoftDel(id interface{}) *Repository_SoftDel_Call {
	return &Repository_SoftDel_Call{Call: _e.mock.On("SoftDel", id)}
}

func (_c *Repository_SoftDel_Call) Run(run func(id string)) *Repository_SoftDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_SoftDel_Call) Return(_a0 *entities.Actors, _a1 error) *Repository_SoftDel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_SoftDel_Call) RunAndReturn(run func(string) (*entities.Actors, error)) *Repository_SoftDel_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
